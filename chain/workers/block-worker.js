"use strict";var e=require("@leofcoin/codec-format-interface"),r=require("bn.js"),t=require("@ethersproject/bytes"),s=require("@ethersproject/logger");require("@ethersproject/bignumber");var n=require("child_process"),i=require("path");function o(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var a=o(r);class BlockMessage extends e.FormatInterface{get keys(){return["index","previousHash","timestamp","reward","fees","transactions","validators"]}get messageName(){return"BlockMessage"}constructor(e){super(e,"\nmessage ValidatorMessage {\n  required string address = 1;\n  required string reward = 2;\n}\n\nmessage Transaction {\n  required string hash = 1;\n  required uint64 timestamp = 2;\n  required string from = 3;\n  required string to = 4;\n  required uint64 nonce = 5;\n  required string method = 6;\n  repeated string params = 7;\n}\n\nmessage BlockMessage {\n  required uint64 index = 1;\n  required string previousHash = 3;\n  required uint64 timestamp = 4;\n  required uint64 reward = 5;\n  required string fees = 6;\n  repeated Transaction transactions = 7;\n  repeated ValidatorMessage validators = 8;\n}\n",{name:"block-message"})}}var u=a.default.BN;const g=new s.Logger("bignumber/5.6.2"),c={};let d=!1;class BigNumber{constructor(e,r){e!==c&&g.throwError("cannot call constructor directly; use BigNumber.from",s.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=r,this._isBigNumber=!0,Object.freeze(this)}fromTwos(e){return m(l(this).fromTwos(e))}toTwos(e){return m(l(this).toTwos(e))}abs(){return"-"===this._hex[0]?BigNumber.from(this._hex.substring(1)):this}add(e){return m(l(this).add(l(e)))}sub(e){return m(l(this).sub(l(e)))}div(e){return BigNumber.from(e).isZero()&&b("division-by-zero","div"),m(l(this).div(l(e)))}mul(e){return m(l(this).mul(l(e)))}mod(e){const r=l(e);return r.isNeg()&&b("division-by-zero","mod"),m(l(this).umod(r))}pow(e){const r=l(e);return r.isNeg()&&b("negative-power","pow"),m(l(this).pow(r))}and(e){const r=l(e);return(this.isNegative()||r.isNeg())&&b("unbound-bitwise-result","and"),m(l(this).and(r))}or(e){const r=l(e);return(this.isNegative()||r.isNeg())&&b("unbound-bitwise-result","or"),m(l(this).or(r))}xor(e){const r=l(e);return(this.isNegative()||r.isNeg())&&b("unbound-bitwise-result","xor"),m(l(this).xor(r))}mask(e){return(this.isNegative()||e<0)&&b("negative-width","mask"),m(l(this).maskn(e))}shl(e){return(this.isNegative()||e<0)&&b("negative-width","shl"),m(l(this).shln(e))}shr(e){return(this.isNegative()||e<0)&&b("negative-width","shr"),m(l(this).shrn(e))}eq(e){return l(this).eq(l(e))}lt(e){return l(this).lt(l(e))}lte(e){return l(this).lte(l(e))}gt(e){return l(this).gt(l(e))}gte(e){return l(this).gte(l(e))}isNegative(){return"-"===this._hex[0]}isZero(){return l(this).isZero()}toNumber(){try{return l(this).toNumber()}catch(e){b("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(e){}return g.throwError("this platform does not support BigInt",s.Logger.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?d||(d=!0,g.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?g.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",s.Logger.errors.UNEXPECTED_ARGUMENT,{}):g.throwError("BigNumber.toString does not accept parameters",s.Logger.errors.UNEXPECTED_ARGUMENT,{})),l(this).toString(10)}toHexString(){return this._hex}toJSON(e){return{type:"BigNumber",hex:this.toHexString()}}static from(e){if(e instanceof BigNumber)return e;if("string"==typeof e)return e.match(/^-?0x[0-9a-f]+$/i)?new BigNumber(c,h(e)):e.match(/^-?[0-9]+$/)?new BigNumber(c,h(new u(e))):g.throwArgumentError("invalid BigNumber string","value",e);if("number"==typeof e)return e%1&&b("underflow","BigNumber.from",e),(e>=9007199254740991||e<=-9007199254740991)&&b("overflow","BigNumber.from",e),BigNumber.from(String(e));const r=e;if("bigint"==typeof r)return BigNumber.from(r.toString());if(t.isBytes(r))return BigNumber.from(t.hexlify(r));if(r)if(r.toHexString){const e=r.toHexString();if("string"==typeof e)return BigNumber.from(e)}else{let e=r._hex;if(null==e&&"BigNumber"===r.type&&(e=r.hex),"string"==typeof e&&(t.isHexString(e)||"-"===e[0]&&t.isHexString(e.substring(1))))return BigNumber.from(e)}return g.throwArgumentError("invalid BigNumber value","value",e)}static isBigNumber(e){return!(!e||!e._isBigNumber)}}function h(e){if("string"!=typeof e)return h(e.toString(16));if("-"===e[0])return"-"===(e=e.substring(1))[0]&&g.throwArgumentError("invalid hex","value",e),"0x00"===(e=h(e))?e:"-"+e;if("0x"!==e.substring(0,2)&&(e="0x"+e),"0x"===e)return"0x00";for(e.length%2&&(e="0x0"+e.substring(2));e.length>4&&"0x00"===e.substring(0,4);)e="0x"+e.substring(4);return e}function m(e){return BigNumber.from(h(e))}function l(e){const r=BigNumber.from(e).toHexString();return"-"===r[0]?new u("-"+r.substring(3),16):new u(r.substring(2),16)}function b(e,r,t){const n={fault:e,operation:r};return null!=t&&(n.value=t),g.throwError(e,s.Logger.errors.NUMERIC_FAULT,n)}new s.Logger("units/5.6.1");const f=["Bytes","KB","MB","GB","TB","PB","EB","ZB","YB"],p=(e,r=2)=>{if(0===e)return"0 Bytes";r<0&&(r=0);const t=Math.floor(Math.log(e)/Math.log(1024));return`${parseFloat((e/Math.pow(1024,t)).toFixed(r))} ${f[t]}`};globalThis.BigNumber=BigNumber,globalThis.peernet=globalThis.peernet||{},globalThis.contracts={};const N=async e=>{globalThis.peernet.codecs={"contract-message":{codec:parseInt("63636d",16),hashAlg:"keccak-256"},"transaction-message":{codec:parseInt("746d",16),hashAlg:"keccak-256"},"block-message":{codec:parseInt("626d",16),hashAlg:"keccak-256"}},e=await(async e=>(e=(e=await Promise.all(e.map((e=>new BlockMessage(e))))).sort(((e,r)=>e.decoded.timestamp-r.decoded.timestamp)),await Promise.all(e.map((e=>new Promise((async(r,t)=>{if(globalThis.process){const t=n.fork(i.join(__dirname,"./workers/transaction-worker.js"),{serialization:"advanced"});t.once("message",(async t=>{e.decoded.transactions=t;const s=e.encoded.length||e.encoded.byteLength;console.log(`loaded block: ${await e.hash} @${e.decoded.index} ${p(s)}`),r(e)})),t.send(e.decoded.transactions)}else{const t=new Worker("./workers/transaction-worker.js");t.onmessage=async t=>{const s=t.data;e.decoded.transactions=s;const n=e.encoded.length||e.encoded.byteLength;console.log(`loaded block: ${await e.hash} @${e.decoded.index} ${p(n)}`),r(e)},t.postMessage(e.decoded.transactions)}})))))))(e),globalThis.process?process.send(e):postMessage(e)};globalThis.process?process.on("message",N):onmessage=e=>N(e.data);
