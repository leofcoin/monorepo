"use strict";var e=require("@leofcoin/codec-format-interface"),r=require("bn.js"),t=require("@ethersproject/bytes"),s=require("@ethersproject/logger");require("@ethersproject/bignumber");var n=require("child_process");function i(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=i(r);class BlockMessage extends e.FormatInterface{get keys(){return["index","previousHash","timestamp","reward","fees","transactions","validators"]}get messageName(){return"BlockMessage"}constructor(e){super(e,"\nmessage ValidatorMessage {\n  required string address = 1;\n  required string reward = 2;\n}\n\nmessage Transaction {\n  required string hash = 1;\n  required uint64 timestamp = 2;\n  required string from = 3;\n  required string to = 4;\n  required uint64 nonce = 5;\n  required string method = 6;\n  repeated string params = 7;\n}\n\nmessage BlockMessage {\n  required uint64 index = 1;\n  required string previousHash = 3;\n  required uint64 timestamp = 4;\n  required uint64 reward = 5;\n  required string fees = 6;\n  repeated Transaction transactions = 7;\n  repeated ValidatorMessage validators = 8;\n}\n",{name:"block-message"})}}var a=o.default.BN;const u=new s.Logger("bignumber/5.6.2"),g={};let c=!1;class BigNumber{constructor(e,r){e!==g&&u.throwError("cannot call constructor directly; use BigNumber.from",s.Logger.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=r,this._isBigNumber=!0,Object.freeze(this)}fromTwos(e){return h(m(this).fromTwos(e))}toTwos(e){return h(m(this).toTwos(e))}abs(){return"-"===this._hex[0]?BigNumber.from(this._hex.substring(1)):this}add(e){return h(m(this).add(m(e)))}sub(e){return h(m(this).sub(m(e)))}div(e){return BigNumber.from(e).isZero()&&l("division-by-zero","div"),h(m(this).div(m(e)))}mul(e){return h(m(this).mul(m(e)))}mod(e){const r=m(e);return r.isNeg()&&l("division-by-zero","mod"),h(m(this).umod(r))}pow(e){const r=m(e);return r.isNeg()&&l("negative-power","pow"),h(m(this).pow(r))}and(e){const r=m(e);return(this.isNegative()||r.isNeg())&&l("unbound-bitwise-result","and"),h(m(this).and(r))}or(e){const r=m(e);return(this.isNegative()||r.isNeg())&&l("unbound-bitwise-result","or"),h(m(this).or(r))}xor(e){const r=m(e);return(this.isNegative()||r.isNeg())&&l("unbound-bitwise-result","xor"),h(m(this).xor(r))}mask(e){return(this.isNegative()||e<0)&&l("negative-width","mask"),h(m(this).maskn(e))}shl(e){return(this.isNegative()||e<0)&&l("negative-width","shl"),h(m(this).shln(e))}shr(e){return(this.isNegative()||e<0)&&l("negative-width","shr"),h(m(this).shrn(e))}eq(e){return m(this).eq(m(e))}lt(e){return m(this).lt(m(e))}lte(e){return m(this).lte(m(e))}gt(e){return m(this).gt(m(e))}gte(e){return m(this).gte(m(e))}isNegative(){return"-"===this._hex[0]}isZero(){return m(this).isZero()}toNumber(){try{return m(this).toNumber()}catch(e){l("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(e){}return u.throwError("this platform does not support BigInt",s.Logger.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?c||(c=!0,u.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?u.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",s.Logger.errors.UNEXPECTED_ARGUMENT,{}):u.throwError("BigNumber.toString does not accept parameters",s.Logger.errors.UNEXPECTED_ARGUMENT,{})),m(this).toString(10)}toHexString(){return this._hex}toJSON(e){return{type:"BigNumber",hex:this.toHexString()}}static from(e){if(e instanceof BigNumber)return e;if("string"==typeof e)return e.match(/^-?0x[0-9a-f]+$/i)?new BigNumber(g,d(e)):e.match(/^-?[0-9]+$/)?new BigNumber(g,d(new a(e))):u.throwArgumentError("invalid BigNumber string","value",e);if("number"==typeof e)return e%1&&l("underflow","BigNumber.from",e),(e>=9007199254740991||e<=-9007199254740991)&&l("overflow","BigNumber.from",e),BigNumber.from(String(e));const r=e;if("bigint"==typeof r)return BigNumber.from(r.toString());if(t.isBytes(r))return BigNumber.from(t.hexlify(r));if(r)if(r.toHexString){const e=r.toHexString();if("string"==typeof e)return BigNumber.from(e)}else{let e=r._hex;if(null==e&&"BigNumber"===r.type&&(e=r.hex),"string"==typeof e&&(t.isHexString(e)||"-"===e[0]&&t.isHexString(e.substring(1))))return BigNumber.from(e)}return u.throwArgumentError("invalid BigNumber value","value",e)}static isBigNumber(e){return!(!e||!e._isBigNumber)}}function d(e){if("string"!=typeof e)return d(e.toString(16));if("-"===e[0])return"-"===(e=e.substring(1))[0]&&u.throwArgumentError("invalid hex","value",e),"0x00"===(e=d(e))?e:"-"+e;if("0x"!==e.substring(0,2)&&(e="0x"+e),"0x"===e)return"0x00";for(e.length%2&&(e="0x0"+e.substring(2));e.length>4&&"0x00"===e.substring(0,4);)e="0x"+e.substring(4);return e}function h(e){return BigNumber.from(d(e))}function m(e){const r=BigNumber.from(e).toHexString();return"-"===r[0]?new a("-"+r.substring(3),16):new a(r.substring(2),16)}function l(e,r,t){const n={fault:e,operation:r};return null!=t&&(n.value=t),u.throwError(e,s.Logger.errors.NUMERIC_FAULT,n)}new s.Logger("units/5.6.1");const b=["Bytes","KB","MB","GB","TB","PB","EB","ZB","YB"],f=(e,r=2)=>{if(0===e)return"0 Bytes";r<0&&(r=0);const t=Math.floor(Math.log(e)/Math.log(1024));return`${parseFloat((e/Math.pow(1024,t)).toFixed(r))} ${b[t]}`};globalThis.BigNumber=BigNumber,globalThis.peernet=globalThis.peernet||{},globalThis.contracts={};const p=async e=>{globalThis.peernet.codecs={"contract-message":{codec:parseInt("63636d",16),hashAlg:"keccak-256"},"transaction-message":{codec:parseInt("746d",16),hashAlg:"keccak-256"},"block-message":{codec:parseInt("626d",16),hashAlg:"keccak-256"}},e=await(async e=>(e=(e=await Promise.all(e.map((e=>new BlockMessage(e))))).sort(((e,r)=>e.decoded.timestamp-r.decoded.timestamp)),await Promise.all(e.map((e=>new Promise((async(r,t)=>{if(globalThis.process){const t=n.fork("./workers/transaction-worker.js",{serialization:"advanced"});t.once("message",(async t=>{e.decoded.transactions=t;const s=e.encoded.length||e.encoded.byteLength;console.log(`loaded block: ${await e.hash} @${e.decoded.index} ${f(s)}`),r(e)})),t.send(e.decoded.transactions)}else{const t=new Worker("./workers/transaction-worker.js");t.onmessage=async t=>{const s=t.data;e.decoded.transactions=s;const n=e.encoded.length||e.encoded.byteLength;console.log(`loaded block: ${await e.hash} @${e.decoded.index} ${f(n)}`),r(e)},t.postMessage(e.decoded.transactions)}})))))))(e),globalThis.process?process.send(e):postMessage(e)};globalThis.process?process.on("message",p):onmessage=e=>p(e.data);
