"use strict";var e=require("@leofcoin/codec-format-interface");class TransactionMessage extends e.FormatInterface{get keys(){return["timestamp","from","to","nonce","method","params","signature"]}get messageName(){return"TransactionMessage"}constructor(e){super(e,"\n\nmessage TransactionMessage {\n  required uint64 timestamp = 1;\n  required string from = 2;\n  required string to = 3;\n  required uint64 nonce = 4;\n  required string method = 5;\n  repeated string params = 6;\n  required string signature = 7;\n}\n",{name:"transaction-message"})}}globalThis.peernet=globalThis.peernet||{},globalThis.contracts={},process.on("message",(async e=>{globalThis.peernet.codecs={"contract-message":{codec:parseInt("63636d",16),hashAlg:"keccak-256"},"transaction-message":{codec:parseInt("746d",16),hashAlg:"keccak-256"},"block-message":{codec:parseInt("626d",16),hashAlg:"keccak-256"}},e=await Promise.all(e.map((async e=>new TransactionMessage(e)))),process.send(e)}));
