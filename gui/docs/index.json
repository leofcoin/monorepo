[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/index.js",
    "content": "import { app, BrowserWindow } from 'electron'\nimport path from 'path'\n\n// Handle creating/removing shortcuts on Windows when installing/uninstalling.\nif (require('electron-squirrel-startup')) { app.quit() }\n\nconst handleSquirrelEvent = () => {\n  if (process.argv.length === 1) {\n    return false;\n  }\n\n  const ChildProcess = require('child_process');\n  const path = require('path');\n\n  const appFolder = path.resolve(process.execPath, '..');\n  const rootAtomFolder = path.resolve(appFolder, '..');\n  const updateDotExe = path.resolve(path.join(rootAtomFolder, 'Update.exe'));\n  const exeName = path.basename(process.execPath);\n\n  const spawn = function(command, args) {\n    let spawnedProcess, error;\n\n    try {\n      spawnedProcess = ChildProcess.spawn(command, args, {detached: true});\n    } catch (error) {}\n\n    return spawnedProcess;\n  };\n\n  const spawnUpdate = function(args) {\n    return spawn(updateDotExe, args);\n  };\n\n  const squirrelEvent = process.argv[1];\n  switch (squirrelEvent) {\n    case '--squirrel-install':\n    case '--squirrel-updated':\n      // Optionally do things such as:\n      // - Add your .exe to the PATH\n      // - Write to the registry for things like file associations and\n      //   explorer context menus\n\n      // Install desktop and start menu shortcuts\n      spawnUpdate(['--createShortcut', exeName]);\n\n      setTimeout(app.quit, 1000);\n      return true;\n\n    case '--squirrel-uninstall':\n      // Undo anything you did in the --squirrel-install and\n      // --squirrel-updated handlers\n\n      // Remove desktop and start menu shortcuts\n      spawnUpdate(['--removeShortcut', exeName]);\n\n      setTimeout(app.quit, 1000);\n      return true;\n\n    case '--squirrel-obsolete':\n      // This is called on the outgoing version of your app before\n      // we update to the new version - it's the opposite of\n      // --squirrel-updated\n\n      app.quit();\n      return true;\n  }\n}\nif (handleSquirrelEvent()) {} else {\n  const createWindow = () => {\n    // Create the browser window.\n    const mainWindow = new BrowserWindow({\n      width: 800,\n      height: 600,\n      webPreferences: {\n        nodeIntegrationInWorker: true\n      }\n    });\n\n    // and load the index.html of the app.\n    mainWindow.loadFile(path.join(__dirname, 'index.html'));\n\n    // Open the DevTools.\n    mainWindow.webContents.openDevTools();\n  };\n\n  // This method will be called when Electron has finished\n  // initialization and is ready to create browser windows.\n  // Some APIs can only be used after this event occurs.\n  app.on('ready', createWindow);\n\n  // Quit when all windows are closed, except on macOS. There, it's common\n  // for applications and their menu bar to stay active until the user quits\n  // explicitly with Cmd + Q.\n  app.on('window-all-closed', () => {\n    if (process.platform !== 'darwin') {\n      app.quit();\n    }\n  });\n\n  app.on('activate', () => {\n    // On OS X it's common to re-create a window in the app when the\n    // dock icon is clicked and there are no other windows open.\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow();\n    }\n  });\n}\n\n\n\n// In this file you can include the rest of your app's specific main process\n// code. You can also put them in separate files and import them here.\n",
    "static": true,
    "longname": "D:/Workspace/Arteon/node-gui/src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "function",
    "name": "handleSquirrelEvent",
    "memberof": "src/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/index.js~handleSquirrelEvent",
    "access": null,
    "export": false,
    "importPath": "@artonline/node/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 2,
    "kind": "file",
    "name": "src/www/api.js",
    "content": "const worker = new Worker('./chain.js')\r\n\r\nglobalThis.chainRequest = (method, params) => new Promise((resolve,  reject) => {\r\n  const id = Math.random().toString(36).slice(-12);\r\n  const handle = m => {\r\n    resolve(m.data)\r\n    pubsub.unsubscribe(id, handle)\r\n  }\r\n  pubsub.subscribe(id, handle)\r\n  worker.postMessage({id, method, params})\r\n})\r\n\r\nworker.onmessage = (m) => {\r\n  console.log(m.data);\r\n\r\n  if (m.data === 'ready') pubsub.publish('chain:ready', true)\r\n  if (m.data.id) pubsub.publish(m.data.id, m.data)\r\n  if (m.data.publish) pubsub.publish(m.data.event, m.data.data)\r\n}\r\n\r\nexport default {\r\n  peerId: () => chainRequest('peerId'),\r\n  createTransactionFrom: params => chainRequest('createTransactionFrom', params)\r\n}\r\n",
    "static": true,
    "longname": "D:/Workspace/Arteon/node-gui/src/www/api.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "worker",
    "memberof": "src/www/api.js",
    "static": true,
    "longname": "src/www/api.js~worker",
    "access": null,
    "export": false,
    "importPath": "@artonline/node/src/www/api.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true
  },
  {
    "__docId__": 4,
    "kind": "file",
    "name": "src/www/chain.js",
    "content": "import Node from './../../node_modules/@leofcoin/chain/src/node'\r\nimport Chain from './../../node_modules/@leofcoin/chain/src/chain.js';\r\n\r\n\r\n(async () => {\r\n  console.log(Node);\r\n  const node = await new Node()\r\n  const chain = await new Chain()\r\n  onmessage = ({data}) => {\r\n    if (data.method === 'peerId') return postMessage({id: data.id, data: peernet.peerId})\r\n  }\r\n  pubsub.subscribe('peer:connected', peer => postMessage({publish: true, event: 'peer:connected', data: peer}))\r\n  pubsub.subscribe('peer:left', peer => postMessage({publish: true, event: 'peer:left', data: peer}))\r\n  postMessage('ready')\r\n})()\r\n",
    "static": true,
    "longname": "D:/Workspace/Arteon/node-gui/src/www/chain.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 5,
    "kind": "file",
    "name": "src/www/clipboard-copy.js",
    "content": "export default customElements.define('clipboard-copy', class ClipboardCopy extends HTMLElement {\r\n  constructor() {\r\n    super()\r\n    this.attachShadow({mode: 'open'})\r\n    this.title = 'click to copy'\r\n    this.shadowRoot.innerHTML = this.template\r\n  }\r\n\r\n  copy() {\r\n    navigator.clipboard.writeText(this.innerHTML);\r\n  }\r\n\r\n  connectedCallback() {\r\n    this.addEventListener('click', this.copy.bind(this))\r\n  }\r\n\r\n  get template() {\r\n    return `\r\n<style>\r\n  :host {\r\n    display: flex;\r\n    padding: 6px 12px;\r\n    box-sizing: border-box;\r\n    pointer-events: auto !important;\r\n    cursor: pointer;\r\n    font-size: 14px;\r\n  }\r\n</style>\r\n<slot></slot>\r\n    `\r\n  }\r\n\r\n})\r\n",
    "static": true,
    "longname": "D:/Workspace/Arteon/node-gui/src/www/clipboard-copy.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 6,
    "kind": "file",
    "name": "src/www/shell.js",
    "content": "import Pubsub from './../../node_modules/@vandeurenglenn/little-pubsub/src/index'\r\nimport './../../node_modules/@vandeurenglenn/flex-elements/src/flex-elements'\r\n\r\nimport './clipboard-copy.js'\r\nimport './wallet'\r\nimport api from './api'\r\n\r\nglobalThis.pubsub = globalThis.pubsub || new Pubsub()\r\nglobalThis.api = globalThis.api || api\r\n\r\nexport default customElements.define('app-shell', class AppShell extends HTMLElement {\r\n  peersConnected = 0\r\n\r\n  constructor() {\r\n    super()\r\n    this.attachShadow({mode: 'open'})\r\n    this.shadowRoot.innerHTML = this.template\r\n  }\r\n\r\n  async init() {\r\n    this.peerId = await api.peerId()\r\n  }\r\n\r\n  set peerId(value) {\r\n    this.shadowRoot.querySelector('.peer-id').innerHTML = value\r\n  }\r\n\r\n  connectedCallback() {\r\n    pubsub.subscribe('chain:ready', this.init.bind(this))\r\n    pubsub.subscribe('peer:connected', this.peerConnected.bind(this))\r\n    pubsub.subscribe('peer:left', this.peerLeft.bind(this))\r\n  }\r\n\r\n\r\n  /**\r\n   * @param {Peer} peer\r\n   */\r\n  peerConnected(peer) {\r\n    this.peersConnected += 1\r\n    this.peers.push(peer)\r\n  }\r\n\r\n  /**\r\n   * @param {Peer} peer\r\n   */\r\n  peerLeft(peer) {\r\n    this.peersConnected -= 1\r\n    // this.peers.slicr\r\n    // this.peers.push(peer)\r\n  }\r\n\r\n  set peersConnected(value) {\r\n    this.shadowRoot.querySelector('.peers').innerHTML = value\r\n  }\r\n\r\n  get template() {\r\n    return `\r\n    <style>\r\n      @import url('https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100;0,300;0,400;0,600;0,700;0,800;1,300;1,400&display=swap');\r\n\r\n      :host {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        bottom: 0;\r\n        right: 0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        font-family: 'Noto Sans', sans-serif;\r\n        background: linear-gradient(45deg, #66477c, transparent);\r\n      }\r\n\r\n      .peer-id {\r\n        border: 1px solid white;\r\n        background: #7f6592;\r\n        border-radius: 12px;\r\n        color: aliceblue;\r\n        position: absolute;\r\n        /* top: 50%; */\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        bottom: 12px;\r\n      }\r\n    </style>\r\n\r\n    <wallet-element></wallet-element>\r\n    <flex-row>\r\n      <flex-one></flex-one>\r\n      <clipboard-copy class=\"peer-id\">\r\n        loading...\r\n      </clipboard-copy>\r\n    </flex-row>\r\n\r\n    <span class=\"peers\"></span>\r\n\r\n    `\r\n  }\r\n})\r\n",
    "static": true,
    "longname": "D:/Workspace/Arteon/node-gui/src/www/shell.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "kind": "index",
    "content": "",
    "longname": "D:\\Workspace\\Arteon\\node-gui\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"@artonline/node\",\n  \"productName\": \"ArtOnline Node\",\n  \"setupName\": \"ArtOnlineNodeSetup\",\n  \"version\": \"1.0.1\",\n  \"description\": \"ArtOnline Node GUI\",\n  \"company\": \"Artonline\",\n  \"appId\": \"org.artonline.nodegui\",\n  \"copyright\": \"Copyright © 2022 ArtOnline\",\n  \"main\": \"./app/index.js\",\n  \"scripts\": {\n    \"generate-docs\": \"sh node_modules/.bin/esdoc\",\n    \"install\": \"npm i -g rollup\",\n    \"start\": \"electron app/index.js\",\n    \"build\": \"rollup -c && electron-kit\",\n    \"dev\": \"rollup -c -w\"\n  },\n  \"keywords\": [],\n  \"author\": {\n    \"name\": \"vandeurenglenn\",\n    \"email\": \"vandeurenglenn@gmail.com\"\n  },\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@rollup/plugin-json\": \"^4.1.0\",\n    \"electron-squirrel-startup\": \"^1.0.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"jsdoc\": \"^3.6.10\",\n    \"jsdoc-template\": \"github:braintree/jsdoc-template\",\n    \"rollup\": \"^2.74.1\"\n  },\n  \"dependencies\": {\n    \"@leofcoin/chain\": \"^1.0.7\",\n    \"@leofcoin/peernet\": \"^0.11.25\",\n    \"@vandeurenglenn/debug\": \"^1.0.0\",\n    \"@vandeurenglenn/flex-elements\": \"^0.1.0\",\n    \"@vandeurenglenn/little-pubsub\": \"^1.3.3\",\n    \"electron\": \"^18.2.4\"\n  }\n}\n",
    "longname": "D:\\Workspace\\Arteon\\node-gui\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]